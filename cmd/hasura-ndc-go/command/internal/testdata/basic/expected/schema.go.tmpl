// Code generated by github.com/hasura/ndc-sdk-go/cmd/hasura-ndc-go, DO NOT EDIT.
package main
import (
  "github.com/hasura/ndc-sdk-go/schema"
  "github.com/hasura/ndc-sdk-go/utils"
)

// GetConnectorSchema gets the generated connector schema
func GetConnectorSchema() schema.SchemaResponse {
	return schema.SchemaResponse{
		Collections: []schema.CollectionInfo{},
		ObjectTypes: schema.SchemaResponseObjectTypes{
    "Author": schema.ObjectType{
      Fields: schema.ObjectTypeFields{
        "id": schema.ObjectField{
          Type: schema.NewNamedType("String").Encode(),
        },
        "created_at": schema.ObjectField{
          Type: schema.NewNamedType("TimestampTZ").Encode(),
        },
      },
    },
    "CreateArticleArgumentsAuthor": schema.ObjectType{
      Fields: schema.ObjectTypeFields{
        "id": schema.ObjectField{
          Type: schema.NewNamedType("UUID").Encode(),
        },
        "created_at": schema.ObjectField{
          Type: schema.NewNamedType("TimestampTZ").Encode(),
        },
      },
    },
    "CreateArticleResult": schema.ObjectType{
      Fields: schema.ObjectTypeFields{
        "authors": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("Author")).Encode(),
        },
        "id": schema.ObjectField{
          Type: schema.NewNamedType("Int32").Encode(),
        },
      },
    },
    "CreateAuthorResult": schema.ObjectType{
      Fields: schema.ObjectTypeFields{
        "name": schema.ObjectField{
          Type: schema.NewNamedType("String").Encode(),
        },
        "created_at": schema.ObjectField{
          Type: schema.NewNamedType("TimestampTZ").Encode(),
        },
        "id": schema.ObjectField{
          Type: schema.NewNamedType("Int32").Encode(),
        },
      },
    },
    "GetArticlesResult": schema.ObjectType{
      Fields: schema.ObjectTypeFields{
        "id": schema.ObjectField{
          Type: schema.NewNamedType("String").Encode(),
        },
        "Name": schema.ObjectField{
          Type: schema.NewNamedType("String").Encode(),
        },
      },
    },
    "GetTypesArguments": schema.ObjectType{
      Fields: schema.ObjectTypeFields{
        "Int32": schema.ObjectField{
          Type: schema.NewNamedType("Int32").Encode(),
        },
        "Int64": schema.ObjectField{
          Type: schema.NewNamedType("Int64").Encode(),
        },
        "Uint": schema.ObjectField{
          Type: schema.NewNamedType("Int32").Encode(),
        },
        "Int16Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("Int16")).Encode(),
        },
        "ArrayInt64": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("Int64")).Encode(),
        },
        "ArrayInt32Ptr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int32"))).Encode(),
        },
        "JSONPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
        },
        "Uint8": schema.ObjectField{
          Type: schema.NewNamedType("Int8").Encode(),
        },
        "ArrayInt8": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("Int8")).Encode(),
        },
        "PtrArrayBigInt": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("BigInt"))).Encode(),
        },
        "BigInt": schema.ObjectField{
          Type: schema.NewNamedType("BigInt").Encode(),
        },
        "ArrayUint32": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("Int32")).Encode(),
        },
        "PtrArrayString": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("String"))).Encode(),
        },
        "PtrArrayUint": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int32"))).Encode(),
        },
        "Object": schema.ObjectField{
          Type: schema.NewNamedType("GetTypesArgumentsObject").Encode(),
        },
        "Int8": schema.ObjectField{
          Type: schema.NewNamedType("Int8").Encode(),
        },
        "IntPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
        },
        "ArrayInt16": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("Int16")).Encode(),
        },
        "ArrayUint64Ptr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int64"))).Encode(),
        },
        "ArrayBigIntPtr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("BigInt"))).Encode(),
        },
        "PtrArrayUint64": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int64"))).Encode(),
        },
        "EnumPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("SomeEnum")).Encode(),
        },
        "ArrayUint8Ptr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int8"))).Encode(),
        },
        "ArrayUint16Ptr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int16"))).Encode(),
        },
        "PtrArrayFloat64Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Float64")))).Encode(),
        },
        "PtrArrayJSONPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("JSON")))).Encode(),
        },
        "UUID": schema.ObjectField{
          Type: schema.NewNamedType("UUID").Encode(),
        },
        "Uint16Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("Int16")).Encode(),
        },
        "ArrayUUIDPtr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("UUID"))).Encode(),
        },
        "ArrayInt16Ptr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int16"))).Encode(),
        },
        "ArrayRawJSONPtr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("RawJSON"))).Encode(),
        },
        "JSON": schema.ObjectField{
          Type: schema.NewNamedType("JSON").Encode(),
        },
        "Uint8Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("Int8")).Encode(),
        },
        "CustomScalarPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("CommentString")).Encode(),
        },
        "ArrayUint64": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("Int64")).Encode(),
        },
        "ArrayTime": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("TimestampTZ")).Encode(),
        },
        "Uint64Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
        },
        "Float64Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("Float64")).Encode(),
        },
        "TextPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
        },
        "PtrArrayInt64": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int64"))).Encode(),
        },
        "Uint32": schema.ObjectField{
          Type: schema.NewNamedType("Int32").Encode(),
        },
        "ArrayStringPtr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("String"))).Encode(),
        },
        "BoolPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
        },
        "Int64Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
        },
        "ArrayFloat32Ptr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Float32"))).Encode(),
        },
        "StringPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
        },
        "ArrayFloat64": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("Float64")).Encode(),
        },
        "ArrayIntPtr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int32"))).Encode(),
        },
        "ArrayMapPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("JSON"))).Encode(),
        },
        "PtrArrayInt8Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int8")))).Encode(),
        },
        "PtrArrayUint64Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int64")))).Encode(),
        },
        "Int32Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
        },
        "ArrayString": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("String")).Encode(),
        },
        "ArrayInt32": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("Int32")).Encode(),
        },
        "Bytes": schema.ObjectField{
          Type: schema.NewNamedType("Bytes").Encode(),
        },
        "Int": schema.ObjectField{
          Type: schema.NewNamedType("Int32").Encode(),
        },
        "URL": schema.ObjectField{
          Type: schema.NewNamedType("URL").Encode(),
        },
        "PtrArrayFloat64": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Float64"))).Encode(),
        },
        "PtrArrayUintPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int32")))).Encode(),
        },
        "Float64": schema.ObjectField{
          Type: schema.NewNamedType("Float64").Encode(),
        },
        "Int8Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("Int8")).Encode(),
        },
        "PtrArrayRawJSONPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("RawJSON")))).Encode(),
        },
        "ObjectPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("GetTypesArgumentsObjectPtr")).Encode(),
        },
        "ArrayObject": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("GetTypesArgumentsArrayObject")).Encode(),
        },
        "ArrayUint": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("Int32")).Encode(),
        },
        "PtrArrayBool": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Boolean"))).Encode(),
        },
        "PtrArrayFloat32Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Float32")))).Encode(),
        },
        "NamedObjectPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("Author")).Encode(),
        },
        "UintPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
        },
        "ArrayInt64Ptr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int64"))).Encode(),
        },
        "PtrArrayInt16": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int16"))).Encode(),
        },
        "PtrArrayTimePtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("TimestampTZ")))).Encode(),
        },
        "ArrayMap": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("JSON")).Encode(),
        },
        "Time": schema.ObjectField{
          Type: schema.NewNamedType("TimestampTZ").Encode(),
        },
        "ArrayFloat32": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("Float32")).Encode(),
        },
        "PtrArrayFloat32": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Float32"))).Encode(),
        },
        "PtrArrayInt16Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int16")))).Encode(),
        },
        "ArrayObjectPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("GetTypesArgumentsArrayObjectPtr"))).Encode(),
        },
        "RawJSON": schema.ObjectField{
          Type: schema.NewNamedType("RawJSON").Encode(),
        },
        "ArrayUint16": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("Int16")).Encode(),
        },
        "PtrArrayUint8": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int8"))).Encode(),
        },
        "PtrArrayUUID": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("UUID"))).Encode(),
        },
        "NamedArray": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("Author")).Encode(),
        },
        "Int16": schema.ObjectField{
          Type: schema.NewNamedType("Int16").Encode(),
        },
        "ArrayBool": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("Boolean")).Encode(),
        },
        "ArrayRawJSON": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("RawJSON")).Encode(),
        },
        "Map": schema.ObjectField{
          Type: schema.NewNamedType("JSON").Encode(),
        },
        "Uint16": schema.ObjectField{
          Type: schema.NewNamedType("Int16").Encode(),
        },
        "Float32Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("Float32")).Encode(),
        },
        "ArrayUint32Ptr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int32"))).Encode(),
        },
        "ArrayFloat64Ptr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Float64"))).Encode(),
        },
        "ArrayJSONPtr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("JSON"))).Encode(),
        },
        "PtrArrayBigIntPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("BigInt")))).Encode(),
        },
        "UUIDArray": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("UUID")).Encode(),
        },
        "PtrArrayInt64Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int64")))).Encode(),
        },
        "BytesPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("Bytes")).Encode(),
        },
        "Float32": schema.ObjectField{
          Type: schema.NewNamedType("Float32").Encode(),
        },
        "Enum": schema.ObjectField{
          Type: schema.NewNamedType("SomeEnum").Encode(),
        },
        "BigIntPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("BigInt")).Encode(),
        },
        "PtrArrayInt32": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int32"))).Encode(),
        },
        "PtrArrayUint16": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int16"))).Encode(),
        },
        "NamedArrayPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Author"))).Encode(),
        },
        "MapPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
        },
        "UUIDPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("UUID")).Encode(),
        },
        "TimePtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
        },
        "ArrayInt": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("Int32")).Encode(),
        },
        "ArrayBoolPtr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Boolean"))).Encode(),
        },
        "ArrayBigInt": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("BigInt")).Encode(),
        },
        "PtrArrayUUIDPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("UUID")))).Encode(),
        },
        "RawJSONPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("RawJSON")).Encode(),
        },
        "NamedObject": schema.ObjectField{
          Type: schema.NewNamedType("Author").Encode(),
        },
        "Uint64": schema.ObjectField{
          Type: schema.NewNamedType("Int64").Encode(),
        },
        "CustomScalar": schema.ObjectField{
          Type: schema.NewNamedType("CommentString").Encode(),
        },
        "ArrayUint8": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("Int8")).Encode(),
        },
        "ArrayTimePtr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("TimestampTZ"))).Encode(),
        },
        "PtrArrayUint32": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int32"))).Encode(),
        },
        "PtrArrayJSON": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("JSON"))).Encode(),
        },
        "PtrArrayTime": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("TimestampTZ"))).Encode(),
        },
        "Bool": schema.ObjectField{
          Type: schema.NewNamedType("Boolean").Encode(),
        },
        "Uint32Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
        },
        "ArrayJSON": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("JSON")).Encode(),
        },
        "PtrArrayInt8": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int8"))).Encode(),
        },
        "PtrArrayStringPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("String")))).Encode(),
        },
        "PtrArrayIntPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int32")))).Encode(),
        },
        "PtrArrayUint32Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int32")))).Encode(),
        },
        "String": schema.ObjectField{
          Type: schema.NewNamedType("String").Encode(),
        },
        "ArrayUUID": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNamedType("UUID")).Encode(),
        },
        "PtrArrayInt": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int32"))).Encode(),
        },
        "PtrArrayInt32Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int32")))).Encode(),
        },
        "PtrArrayRawJSON": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("RawJSON"))).Encode(),
        },
        "ArrayInt8Ptr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int8"))).Encode(),
        },
        "ArrayUintPtr": schema.ObjectField{
          Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int32"))).Encode(),
        },
        "PtrArrayUint8Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int8")))).Encode(),
        },
        "Text": schema.ObjectField{
          Type: schema.NewNamedType("String").Encode(),
        },
        "PtrArrayBoolPtr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Boolean")))).Encode(),
        },
        "PtrArrayUint16Ptr": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int16")))).Encode(),
        },
      },
    },
    "GetTypesArgumentsArrayObject": schema.ObjectType{
      Fields: schema.ObjectTypeFields{
        "content": schema.ObjectField{
          Type: schema.NewNamedType("String").Encode(),
        },
      },
    },
    "GetTypesArgumentsArrayObjectPtr": schema.ObjectType{
      Fields: schema.ObjectTypeFields{
        "content": schema.ObjectField{
          Type: schema.NewNamedType("String").Encode(),
        },
      },
    },
    "GetTypesArgumentsObject": schema.ObjectType{
      Fields: schema.ObjectTypeFields{
        "created_at": schema.ObjectField{
          Type: schema.NewNamedType("TimestampTZ").Encode(),
        },
        "id": schema.ObjectField{
          Type: schema.NewNamedType("UUID").Encode(),
        },
      },
    },
    "GetTypesArgumentsObjectPtr": schema.ObjectType{
      Fields: schema.ObjectTypeFields{
        "Long": schema.ObjectField{
          Type: schema.NewNamedType("Int32").Encode(),
        },
        "Lat": schema.ObjectField{
          Type: schema.NewNamedType("Int32").Encode(),
        },
      },
    },
    "HelloResult": schema.ObjectType{
      Fields: schema.ObjectTypeFields{
        "id": schema.ObjectField{
          Type: schema.NewNamedType("UUID").Encode(),
        },
        "num": schema.ObjectField{
          Type: schema.NewNamedType("Int32").Encode(),
        },
        "text": schema.ObjectField{
          Type: schema.NewNamedType("String").Encode(),
        },
        "foo": schema.ObjectField{
          Type: schema.NewNamedType("Foo").Encode(),
        },
        "error": schema.ObjectField{
          Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
        },
      },
    },
		},
		Functions: []schema.FunctionInfo{
		{
			Name: "getBool",
      	Description: utils.ToPtr("return an scalar boolean"),
      	ResultType: schema.NewNamedType("Boolean").Encode(),
      	Arguments: schema.FunctionInfoArguments{
	      },
	    },
		{
			Name: "getTypes",
      	ResultType: schema.NewNullableType(schema.NewNamedType("GetTypesArguments")).Encode(),
      	Arguments: schema.FunctionInfoArguments{
        "Float64": schema.ArgumentInfo{
          	Type: schema.NewNamedType("Float64").Encode(),
	        },
        "PtrArrayFloat64Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Float64")))).Encode(),
	        },
        "IntPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
	        },
        "PtrArrayUUID": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("UUID"))).Encode(),
	        },
        "ArrayInt32": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("Int32")).Encode(),
	        },
        "ArrayUint32Ptr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int32"))).Encode(),
	        },
        "ArrayIntPtr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int32"))).Encode(),
	        },
        "PtrArrayUint64": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int64"))).Encode(),
	        },
        "ObjectPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("GetTypesArgumentsObjectPtr")).Encode(),
	        },
        "PtrArrayInt8": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int8"))).Encode(),
	        },
        "Int64": schema.ArgumentInfo{
          	Type: schema.NewNamedType("Int64").Encode(),
	        },
        "PtrArrayUUIDPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("UUID")))).Encode(),
	        },
        "UintPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
	        },
        "ArrayUint": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("Int32")).Encode(),
	        },
        "PtrArrayUint": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int32"))).Encode(),
	        },
        "ArrayInt16Ptr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int16"))).Encode(),
	        },
        "UUIDPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("UUID")).Encode(),
	        },
        "PtrArrayInt32Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int32")))).Encode(),
	        },
        "Uint16Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("Int16")).Encode(),
	        },
        "EnumPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("SomeEnum")).Encode(),
	        },
        "Int16": schema.ArgumentInfo{
          	Type: schema.NewNamedType("Int16").Encode(),
	        },
        "ArrayUint64Ptr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int64"))).Encode(),
	        },
        "Int": schema.ArgumentInfo{
          	Type: schema.NewNamedType("Int32").Encode(),
	        },
        "Float32Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("Float32")).Encode(),
	        },
        "ArrayUint64": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("Int64")).Encode(),
	        },
        "ArrayFloat64": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("Float64")).Encode(),
	        },
        "PtrArrayUint16Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int16")))).Encode(),
	        },
        "ArrayUintPtr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int32"))).Encode(),
	        },
        "BoolPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
	        },
        "Float64Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("Float64")).Encode(),
	        },
        "String": schema.ArgumentInfo{
          	Type: schema.NewNamedType("String").Encode(),
	        },
        "CustomScalarPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("CommentString")).Encode(),
	        },
        "PtrArrayInt64Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int64")))).Encode(),
	        },
        "Uint8Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("Int8")).Encode(),
	        },
        "ArrayMapPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("JSON"))).Encode(),
	        },
        "ArrayFloat32": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("Float32")).Encode(),
	        },
        "NamedObjectPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("Author")).Encode(),
	        },
        "BigInt": schema.ArgumentInfo{
          	Type: schema.NewNamedType("BigInt").Encode(),
	        },
        "UUID": schema.ArgumentInfo{
          	Type: schema.NewNamedType("UUID").Encode(),
	        },
        "ArrayInt64": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("Int64")).Encode(),
	        },
        "PtrArrayRawJSON": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("RawJSON"))).Encode(),
	        },
        "Uint16": schema.ArgumentInfo{
          	Type: schema.NewNamedType("Int16").Encode(),
	        },
        "NamedArrayPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Author"))).Encode(),
	        },
        "Int32": schema.ArgumentInfo{
          	Type: schema.NewNamedType("Int32").Encode(),
	        },
        "ArrayUint8": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("Int8")).Encode(),
	        },
        "ArrayRawJSONPtr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("RawJSON"))).Encode(),
	        },
        "ArrayString": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("String")).Encode(),
	        },
        "PtrArrayUint64Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int64")))).Encode(),
	        },
        "PtrArrayInt16Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int16")))).Encode(),
	        },
        "Int16Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("Int16")).Encode(),
	        },
        "PtrArrayBool": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Boolean"))).Encode(),
	        },
        "PtrArrayInt32": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int32"))).Encode(),
	        },
        "PtrArrayFloat32": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Float32"))).Encode(),
	        },
        "ArrayInt64Ptr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int64"))).Encode(),
	        },
        "PtrArrayFloat32Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Float32")))).Encode(),
	        },
        "ArrayObject": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("GetTypesArgumentsArrayObject")).Encode(),
	        },
        "PtrArrayUint8": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int8"))).Encode(),
	        },
        "ArrayInt": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("Int32")).Encode(),
	        },
        "PtrArrayInt64": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int64"))).Encode(),
	        },
        "JSON": schema.ArgumentInfo{
          	Type: schema.NewNamedType("JSON").Encode(),
	        },
        "RawJSONPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("RawJSON")).Encode(),
	        },
        "MapPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
	        },
        "Uint8": schema.ArgumentInfo{
          	Type: schema.NewNamedType("Int8").Encode(),
	        },
        "ArrayUint16Ptr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int16"))).Encode(),
	        },
        "ArrayRawJSON": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("RawJSON")).Encode(),
	        },
        "Uint32Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
	        },
        "Bool": schema.ArgumentInfo{
          	Type: schema.NewNamedType("Boolean").Encode(),
	        },
        "Int8Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("Int8")).Encode(),
	        },
        "PtrArrayJSON": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("JSON"))).Encode(),
	        },
        "PtrArrayUint16": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int16"))).Encode(),
	        },
        "BytesPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("Bytes")).Encode(),
	        },
        "PtrArrayJSONPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("JSON")))).Encode(),
	        },
        "BigIntPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("BigInt")).Encode(),
	        },
        "JSONPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
	        },
        "ArrayInt8Ptr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int8"))).Encode(),
	        },
        "TimePtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
	        },
        "UUIDArray": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("UUID")).Encode(),
	        },
        "Enum": schema.ArgumentInfo{
          	Type: schema.NewNamedType("SomeEnum").Encode(),
	        },
        "PtrArrayInt16": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int16"))).Encode(),
	        },
        "ArrayBoolPtr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Boolean"))).Encode(),
	        },
        "Int32Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
	        },
        "ArrayUUIDPtr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("UUID"))).Encode(),
	        },
        "PtrArrayIntPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int32")))).Encode(),
	        },
        "PtrArrayBoolPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Boolean")))).Encode(),
	        },
        "ArrayBool": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("Boolean")).Encode(),
	        },
        "ArrayUint8Ptr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int8"))).Encode(),
	        },
        "StringPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
	        },
        "ArrayUUID": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("UUID")).Encode(),
	        },
        "TextPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
	        },
        "PtrArrayInt": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int32"))).Encode(),
	        },
        "PtrArrayTimePtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("TimestampTZ")))).Encode(),
	        },
        "ArrayUint32": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("Int32")).Encode(),
	        },
        "Text": schema.ArgumentInfo{
          	Type: schema.NewNamedType("String").Encode(),
	        },
        "ArrayTimePtr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("TimestampTZ"))).Encode(),
	        },
        "Uint64Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
	        },
        "ArrayInt32Ptr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int32"))).Encode(),
	        },
        "PtrArrayUintPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int32")))).Encode(),
	        },
        "PtrArrayUint32": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Int32"))).Encode(),
	        },
        "Uint32": schema.ArgumentInfo{
          	Type: schema.NewNamedType("Int32").Encode(),
	        },
        "ArrayFloat32Ptr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Float32"))).Encode(),
	        },
        "NamedArray": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("Author")).Encode(),
	        },
        "PtrArrayUint32Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int32")))).Encode(),
	        },
        "Map": schema.ArgumentInfo{
          	Type: schema.NewNamedType("JSON").Encode(),
	        },
        "PtrArrayUint8Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int8")))).Encode(),
	        },
        "NamedObject": schema.ArgumentInfo{
          	Type: schema.NewNamedType("Author").Encode(),
	        },
        "Bytes": schema.ArgumentInfo{
          	Type: schema.NewNamedType("Bytes").Encode(),
	        },
        "ArrayInt16": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("Int16")).Encode(),
	        },
        "RawJSON": schema.ArgumentInfo{
          	Type: schema.NewNamedType("RawJSON").Encode(),
	        },
        "CustomScalar": schema.ArgumentInfo{
          	Type: schema.NewNamedType("CommentString").Encode(),
	        },
        "PtrArrayInt8Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Int8")))).Encode(),
	        },
        "PtrArrayBigIntPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("BigInt")))).Encode(),
	        },
        "PtrArrayBigInt": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("BigInt"))).Encode(),
	        },
        "ArrayFloat64Ptr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("Float64"))).Encode(),
	        },
        "ArrayBigIntPtr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("BigInt"))).Encode(),
	        },
        "Int8": schema.ArgumentInfo{
          	Type: schema.NewNamedType("Int8").Encode(),
	        },
        "ArrayJSON": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("JSON")).Encode(),
	        },
        "ArrayStringPtr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("String"))).Encode(),
	        },
        "Object": schema.ArgumentInfo{
          	Type: schema.NewNamedType("GetTypesArgumentsObject").Encode(),
	        },
        "ArrayJSONPtr": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("JSON"))).Encode(),
	        },
        "URL": schema.ArgumentInfo{
          	Type: schema.NewNamedType("URL").Encode(),
	        },
        "ArrayTime": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("TimestampTZ")).Encode(),
	        },
        "PtrArrayStringPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("String")))).Encode(),
	        },
        "PtrArrayString": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("String"))).Encode(),
	        },
        "ArrayMap": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("JSON")).Encode(),
	        },
        "PtrArrayTime": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("TimestampTZ"))).Encode(),
	        },
        "ArrayBigInt": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("BigInt")).Encode(),
	        },
        "Int64Ptr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
	        },
        "Uint64": schema.ArgumentInfo{
          	Type: schema.NewNamedType("Int64").Encode(),
	        },
        "Uint": schema.ArgumentInfo{
          	Type: schema.NewNamedType("Int32").Encode(),
	        },
        "ArrayInt8": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("Int8")).Encode(),
	        },
        "PtrArrayFloat64": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("Float64"))).Encode(),
	        },
        "ArrayUint16": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("Int16")).Encode(),
	        },
        "Float32": schema.ArgumentInfo{
          	Type: schema.NewNamedType("Float32").Encode(),
	        },
        "PtrArrayRawJSONPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNullableType(schema.NewNamedType("RawJSON")))).Encode(),
	        },
        "Time": schema.ArgumentInfo{
          	Type: schema.NewNamedType("TimestampTZ").Encode(),
	        },
        "ArrayObjectPtr": schema.ArgumentInfo{
          	Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("GetTypesArgumentsArrayObjectPtr"))).Encode(),
	        },
	      },
	    },
		{
			Name: "hello",
      	Description: utils.ToPtr("sends a hello message"),
      	ResultType: schema.NewNullableType(schema.NewNamedType("HelloResult")).Encode(),
      	Arguments: schema.FunctionInfoArguments{
	      },
	    },
		{
			Name: "getArticles",
      	Description: utils.ToPtr("GetArticles"),
      	ResultType: schema.NewArrayType(schema.NewNamedType("GetArticlesResult")).Encode(),
      	Arguments: schema.FunctionInfoArguments{
        "Limit": schema.ArgumentInfo{
          	Type: schema.NewNamedType("Float64").Encode(),
	        },
	      },
	    },
		},
		Procedures: []schema.ProcedureInfo{
		{
			Name: "create_article",
      	Description: utils.ToPtr("CreateArticle"),
      	ResultType: schema.NewNullableType(schema.NewNamedType("CreateArticleResult")).Encode(),
      	Arguments: schema.FunctionInfoArguments{
        "author": schema.ArgumentInfo{
          	Type: schema.NewNamedType("CreateArticleArgumentsAuthor").Encode(),
	        },
	      },
	    },
		{
			Name: "increase",
      	Description: utils.ToPtr("Increase"),
      	ResultType: schema.NewNamedType("Int32").Encode(),
      	Arguments: schema.FunctionInfoArguments{
	      },
	    },
		{
			Name: "createAuthor",
      	Description: utils.ToPtr("creates an author"),
      	ResultType: schema.NewNullableType(schema.NewNamedType("CreateAuthorResult")).Encode(),
      	Arguments: schema.FunctionInfoArguments{
        "name": schema.ArgumentInfo{
          	Type: schema.NewNamedType("String").Encode(),
	        },
	      },
	    },
		{
			Name: "createAuthors",
      	Description: utils.ToPtr("creates a list of authors"),
      	ResultType: schema.NewArrayType(schema.NewNamedType("CreateAuthorResult")).Encode(),
      	Arguments: schema.FunctionInfoArguments{
        "names": schema.ArgumentInfo{
          	Type: schema.NewArrayType(schema.NewNamedType("String")).Encode(),
	        },
	      },
	    },
		},
		ScalarTypes: schema.SchemaResponseScalarTypes{
    "BigInt": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationBigInteger().Encode(),
    	},
    "Boolean": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationBoolean().Encode(),
    	},
    "Bytes": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationBytes().Encode(),
    	},
    "CommentString": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationJSON().Encode(),
    	},
    "Float32": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationFloat32().Encode(),
    	},
    "Float64": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationFloat64().Encode(),
    	},
    "Foo": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationJSON().Encode(),
    	},
    "Int16": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationInt16().Encode(),
    	},
    "Int32": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationInt32().Encode(),
    	},
    "Int64": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationInt64().Encode(),
    	},
    "Int8": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationInt8().Encode(),
    	},
    "JSON": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationJSON().Encode(),
    	},
    "RawJSON": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationJSON().Encode(),
    	},
    "SomeEnum": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationEnum([]string{"foo", "bar"}).Encode(),
    	},
    "String": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationString().Encode(),
    	},
    "TimestampTZ": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationTimestampTZ().Encode(),
    	},
    "URL": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationString().Encode(),
    	},
    "UUID": schema.ScalarType{
		  	AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
		  	ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
      Representation:      schema.NewTypeRepresentationUUID().Encode(),
    	},
  	},
	}
}