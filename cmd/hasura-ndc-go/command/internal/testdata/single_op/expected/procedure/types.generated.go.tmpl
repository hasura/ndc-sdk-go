// Code generated by github.com/hasura/ndc-sdk-go/v2/cmd/hasura-ndc-go, DO NOT EDIT.
package procedure
import (
  "context"
  "github.com/hasura/ndc-codegen-function-only-test/types"
  "github.com/hasura/ndc-sdk-go/v2/connector"
  "github.com/hasura/ndc-sdk-go/v2/schema"
  "github.com/hasura/ndc-sdk-go/v2/utils"
  "go.opentelemetry.io/otel/trace"
  "log/slog"
  "slices"
)

// DataConnectorHandler implements the data connector handler 
type DataConnectorHandler struct{}

// MutationExists check if the mutation name exists
func (dch DataConnectorHandler) MutationExists(name string) bool {
  return slices.Contains(enumValues_ProcedureName, name)
}
func (dch DataConnectorHandler) Mutation(ctx context.Context, state *types.State, operation *schema.MutationOperation) (schema.MutationOperationResults, error) {
  span := trace.SpanFromContext(ctx)  
  logger := connector.GetLogger(ctx)
	ctx = context.WithValue(ctx, utils.CommandSelectionFieldKey, operation.Fields)
  connector_addSpanEvent(span, logger, "validate_request", map[string]any{
    "operations_name": operation.Name,
  })
  
  switch operation.Name {
  case "createDemo":

    selection, err := operation.Fields.AsObject()
    if err != nil {
      return nil, schema.UnprocessableContentError("the selection field type must be object", map[string]any{
        "cause": err.Error(),
      })
    }
    span.AddEvent("execute_procedure")
    rawResult, err := ProcedureCreateDemo(ctx, state)

    if err != nil {
      return nil, err
    }

    if rawResult == nil {
      return schema.NewProcedureResult(nil).Encode(), nil
    }
    connector_addSpanEvent(span, logger, "evaluate_response_selection", map[string]any{
      "raw_result": rawResult,
    })
    result, err := utils.EvalNestedColumnObject(selection, rawResult)

    if err != nil {
      return nil, err
    }
    return schema.NewProcedureResult(result).Encode(), nil

  default:
    return nil, utils.ErrHandlerNotfound
  }
}
var enumValues_ProcedureName = []string{"createDemo"}

func connector_addSpanEvent(span trace.Span, logger *slog.Logger, name string, data map[string]any) {
  logger.Debug(name, slog.Any("data", data))
  attrs := utils.DebugJSONAttributes(data, utils.IsDebug(logger))
  span.AddEvent(name, trace.WithAttributes(attrs...))
}