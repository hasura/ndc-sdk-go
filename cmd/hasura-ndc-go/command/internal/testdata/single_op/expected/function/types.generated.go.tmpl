// Code generated by github.com/hasura/ndc-sdk-go/v2/cmd/hasura-ndc-go, DO NOT EDIT.
package function
import (
  "context"
  "github.com/hasura/ndc-codegen-function-only-test/types"
  "github.com/hasura/ndc-sdk-go/v2/connector"
  "github.com/hasura/ndc-sdk-go/v2/schema"
  "github.com/hasura/ndc-sdk-go/v2/utils"
  "go.opentelemetry.io/otel/trace"
  "log/slog"
  "slices"
)

// ToMap encodes the struct to a value map
func (j SimpleResult) ToMap() map[string]any {
  r := make(map[string]any)
  r["reply"] = j.Reply

  return r
}
// DataConnectorHandler implements the data connector handler 
type DataConnectorHandler struct{}

// QueryExists check if the query name exists
func (dch DataConnectorHandler) QueryExists(name string) bool {
  return slices.Contains(enumValues_FunctionName, name)
}
func (dch DataConnectorHandler) Query(ctx context.Context, state *types.State, request *schema.QueryRequest, rawArgs map[string]any) (*schema.RowSet, error) {
  if !dch.QueryExists(request.Collection) {
    return nil, utils.ErrHandlerNotfound
  }
  queryFields, err := utils.EvalFunctionSelectionFieldValue(request)
  if err != nil {
    return nil, schema.UnprocessableContentError(err.Error(), nil)
  }

  result, err := dch.execQuery(context.WithValue(ctx, utils.CommandSelectionFieldKey, queryFields), state, request, queryFields, rawArgs)
  if err != nil {
    return nil, err
  }
  
  return &schema.RowSet{
    Aggregates: schema.RowSetAggregates{},
    Rows: []map[string]any{
      {
        "__value": result,
      },
    },
  }, nil
}
  
func (dch DataConnectorHandler) execQuery(ctx context.Context, state *types.State, request *schema.QueryRequest, queryFields schema.NestedField, rawArgs map[string]any) (any, error) {
  span := trace.SpanFromContext(ctx)
  logger := connector.GetLogger(ctx)
  switch request.Collection {
  case "simpleObject":

    selection, err := queryFields.AsObject()
    if err != nil {
      return nil, schema.UnprocessableContentError("the selection field type must be object", map[string]any{
        "cause": err.Error(),
      })
    }
    rawResult, err := FunctionSimpleObject(ctx, state)

    if err != nil {
      return nil, err
    }

    connector_addSpanEvent(span, logger, "evaluate_response_selection", map[string]any{
      "raw_result": rawResult,
    })
    result, err := utils.EvalNestedColumnObject(selection, rawResult)
    if err != nil {
      return nil, err
    }
    return result, nil

  default:
    return nil, utils.ErrHandlerNotfound
  }
}
var enumValues_FunctionName = []string{"simpleObject"}

func connector_addSpanEvent(span trace.Span, logger *slog.Logger, name string, data map[string]any) {
  logger.Debug(name, slog.Any("data", data))
  attrs := utils.DebugJSONAttributes(data, utils.IsDebug(logger))
  span.AddEvent(name, trace.WithAttributes(attrs...))
}