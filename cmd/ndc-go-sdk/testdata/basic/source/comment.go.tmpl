package functions

import (
	"context"
	"time"

	"github.com/google/uuid"
)

// @scalar CommentString
type CommentText struct {
	comment string
}

type GetArticlesArguments struct {
  Limit       float64
	Comment 	  CommentText 
	NullableStr *string `json:"nullable_str"`
}

type GetArticlesResult struct {
	ID  string 		`json:"id"`
  Name Text
}

// @function
func GetArticles(ctx context.Context, state *State, arguments *GetArticlesArguments) ([]GetArticlesResult, error) {
	return []GetArticlesResult{
    {
      ID: "1",
      Name: "Article 1",
    },
	}, nil
}

type CreateArticleArguments struct {
  Author struct {
    ID          uuid.UUID `json:"id"`
    Decimal     complex128 `json:"decimal"`
    CreatedAt   time.Time `json:"created_at"`
  } `json:"author"`
}

type Author struct {
  ID          string    `json:"id"`
  Duration    time.Duration `json:"duration"`
  CreatedAt   time.Time `json:"created_at"`
}

type CreateArticleResult struct {
	ID      uint 	    `json:"id"`
  Authors []Author  `json:"authors"`
}

// @procedure create_article
func CreateArticle(ctx context.Context, state *State, arguments *CreateArticleArguments) (*CreateArticleResult, error) {
	return &CreateArticleResult{
		ID:      1,
		Authors: []Author{},
	}, nil
}

// @procedure
func Increase(ctx context.Context, state *State) (int, error) {
	return 0, nil
}
