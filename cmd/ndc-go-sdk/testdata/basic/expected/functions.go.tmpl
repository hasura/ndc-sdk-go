// Code generated by github.com/hasura/ndc-sdk-go/codegen, DO NOT EDIT.
package functions
import (
  "github.com/hasura/ndc-sdk-go/utils"
)
// FromValue decodes values from map
func (j *GetArticlesArguments) FromValue(input map[string]any) error {
  var err error
  j.Comment, err = utils.GetValue[CommentText](input, "Comment")
  if err != nil {
    return err
  }
  j.Limit, err = utils.GetFloat[float64](input, "Limit")
  if err != nil {
    return err
  }
  j.NullableStr, err = utils.GetStringPtr(input, "nullable_str")
  if err != nil {
    return err
  }
  return nil
}
// ToMap encodes the struct to a value map
func (j Author) ToMap() map[string]any {
  return map[string]any{
    "created_at": j.CreatedAt,
    "duration": j.Duration,
    "id": j.ID,
  }
}
// ToMap encodes the struct to a value map
func (j CreateArticleArgumentsAuthor) ToMap() map[string]any {
  return map[string]any{
    "created_at": j.CreatedAt,
    "decimal": j.Decimal,
    "id": j.ID,
  }
}
// ToMap encodes the struct to a value map
func (j CreateArticleResult) ToMap() map[string]any {
  return map[string]any{
    "authors": j.Authors,
    "id": j.ID,
  }
}
// ToMap encodes the struct to a value map
func (j CreateAuthorResult) ToMap() map[string]any {
  return map[string]any{
    "created_at": j.CreatedAt,
    "id": j.ID,
    "name": j.Name,
  }
}
// ToMap encodes the struct to a value map
func (j GetArticlesResult) ToMap() map[string]any {
  return map[string]any{
    "id": j.ID,
    "Name": j.Name,
  }
}
// ToMap encodes the struct to a value map
func (j HelloResult) ToMap() map[string]any {
  return map[string]any{
    "foo": j.Foo,
    "id": j.ID,
    "num": j.Num,
    "text": j.Text,
  }
}
// ScalarName get the schema name of the scalar
func (j CommentText) ScalarName() string {
  return "CommentString"
}
// ScalarName get the schema name of the scalar
func (j ScalarFoo) ScalarName() string {
  return "Foo"
}
