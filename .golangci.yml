version: "2"

linters:
  default: all
  disable:
    - err113
    - lll
    - godot
    - depguard
    - wrapcheck
    - varnamelen
    - exhaustruct
    - ireturn
    - gochecknoglobals
    - nilnil
    - mnd
    - recvcheck
  settings:
    tagliatelle:
      # Checks the struct tag name case.
      case:
        rules:
          json: snake
          yaml: snake
          mapstructure: snake
          whatever: snake
    maintidx:
      # Show functions with maintainability index lower than N.
      # A high index indicates better maintainability (it's kind of the opposite of complexity).
      # Default: 20
      under: 15
    exhaustive:
      # Program elements to check for exhaustiveness.
      check:
        - switch
        - map
      # Presence of "default" case in switch statements satisfies exhaustiveness,
      # even if all enum members are not listed.
      default-signifies-exhaustive: true
    cyclop:
      # The maximal code complexity to report.
      # Default: 10
      max-complexity: 30
    revive:
      # Maximum number of open files at the same time.
      max-open-files: 2048
      severity: error
      rules:
        - name: var-naming
          disabled: true
        - name: exported
          disabled: true
    gosec:
      excludes:
        - G115
        - G301
        - G304
        - G306
        - G404
    funlen:
      # Checks the number of lines in a function.
      # If lower than 0, disable the check.
      # Default: 60
      lines: 200
      # Checks the number of statements in a function.
      # If lower than 0, disable the check.
      # Default: 40
      statements: 80
    nestif:
      # Minimal complexity of if statements to report.
      # Default: 5
      min-complexity: 11
    gocognit:
      # Minimal code complexity to report.
      # Default: 30 (but we recommend 10-20)
      min-complexity: 31

  # Defines a set of rules to ignore issues.
  # It does not skip the analysis, and so does not ignore "typecheck" errors.
  exclusions:
    # Mode of the generated files analysis.
    #
    # - `strict`: sources are excluded by strictly following the Go generated file convention.
    #    Source files that have lines matching only the following regular expression will be excluded: `^// Code generated .* DO NOT EDIT\.$`
    #    This line must appear before the first non-comment, non-blank text in the file.
    #    https://go.dev/s/generatedcode
    # - `lax`: sources are excluded if they contain lines like `autogenerated file`, `code generated`, `do not edit`, etc.
    # - `disable`: disable the generated files exclusion.
    #
    # Default: lax
    generated: strict
    # Log a warning if an exclusion rule is unused.
    warn-unused: false
    rules:
      # Exclude some linters from running on tests files.
      - path: ndctest/
        linters:
          - noctx
          - gosec
          - funlen
          - gocognit

      - path: snapshots_gen\.go
        linters:
          - noctx

      - path: example/reference/
        linters:
          - gocognit

      - path: cmd/hasura-ndc-go/command/internal/
        linters:
          - gocognit

    # Which file paths to exclude: they will be analyzed, but issues from them won't be reported.
    # "/" will be replaced by the current OS file path separator to properly work on Windows.
    paths:
      - ".*_test\\.go$"
